type User {
  id: String!
  username: String!
  firstName: String
  lastName: String
  email: String!
  companyId: String
  companySlug: String
  companyName: String
}

# Responses

type CreateAccountResponse {
  user: User!
  jwt: String!
}

type SuccessFailResponse {
  success: Boolean!
}

# Inputs

input UserInput {
  username: String!
  firstName: String
  lastName: String
  email: String!
  password: String
}

input CreateAccountInput {
  token: String!
  user: UserInput!
}

input VerifyEmailInput {
  code: String!
}

input SendForgotPasswordInput {
  email: String!
}

input ResetPasswordWithCodeInput {
  code: String!
  email: String!
  password: String!
}

input SendCompanyAuthEmailInput {
  companyId: String!
  username: String!
  email: String!
}

input AuthenticateCompanyEmployeeInput {
  companySlug: String!
  code: String!
}

# Query + Mutation

type Query {
  me: User
}

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountResponse
  verifyEmailAddress(input: VerifyEmailInput!): SuccessFailResponse
  sendForgotPasswordEmail(input: SendForgotPasswordInput!): SuccessFailResponse
  resetPasswordWithCode(
    input: ResetPasswordWithCodeInput!
  ): CreateAccountResponse
  sendCompanyAuthEmail(input: SendCompanyAuthEmailInput!): SuccessFailResponse
  authenticateCompanyEmployee(
    input: AuthenticateCompanyEmployeeInput!
  ): CreateAccountResponse
}
